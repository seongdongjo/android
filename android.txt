package com.example.kotlin


fun main() { //메인함수
    println("Hello world")
    test()
    val result = test2(1,3)
    println(result)
}
//코틀린에서는 함수는 무조건 리턴이 있다.
//fun test() : Unit { //이렇게 Unit이 숨겨져있다고 보면된다. 여기서 Unit은 void 같은거다.
//    println()
//}
//2. 함수
fun test() {
    println("test")
}

fun test2(a: Int, b: Int) : Int {
    println(a+b)
    return a+b
}

//오버로딩
fun test2(a: Int) : Int {
    val b = 3
    println(a+b)
    return a+b
}

//근데, 코틀린에서는 오버로딩이 필요없다 -> default값을 주면된다. b: Int = 3
//호출할 때는 test(a:1)
//fun test2(a: Int, b: Int = 3) : Int {
//    println(a+b)
//    return a+b
//}

====================================================
package com.example.kotlin

fun main() { //메인함수
    //파라미터 순서가 달라도 이렇게 명시적으로 하면 문제가 없다.
    test2(id="상아님", name="채상아", nickname="상아")
    println(times(1,3))
    println(sametimes(1,3))
}

fun test2(name: String, nickname: String, id: String) = println(name+nickname+id)

//단일표현식으로 함수 표현
fun times(a: Int, b: Int) = a*b

//위와 같다
fun sametimes(a: Int, b: Int) : Int {
    return a*b;
}

=================================================
package com.example.kotlin

fun main() {
    //3. 변수
    // val = value(값)
    // var = variable(변경가능한)

    val a : Int = 3
    var b : Int = 10
    //a = 20 에러가난다
    b = 20

    //코틀린은 타입추론이 있어서 뒤에 타입이 없어도 된다.
    val name = "채상아"
    
}
=================================================
package com.example.kotlin

fun main() {
    val user = User("채상아", 10)
    //user.name 접근불가능 private이라서
    println(user.age)
}

class User(private val name: String, var age: Int = 100) {

}

=================================================
package com.example.kotlin

fun main() {
    Kid("아이", 3, "male")
}

//open을 이용해서 상속을 허용해야한다.
open class User(open val name: String, open var age: Int = 100)

//기본생성자는 생략
class Kid(override val name: String, override var age: Int) : User(name,age) {
    var gender: String =  "female"

    //가장먼저 호출
    init {
        println("초기화 중입니다.")
    }

    constructor(name: String, age: Int, gender: String) : this(name,age) {
        this.gender = gender
        println("부 생성자 호출")
    }
}
=================================================











































