package com.example.kotlin


fun main() { //메인함수
    println("Hello world")
    test()
    val result = test2(1,3)
    println(result)
}
//코틀린에서는 함수는 무조건 리턴이 있다.
//fun test() : Unit { //이렇게 Unit이 숨겨져있다고 보면된다. 여기서 Unit은 void 같은거다.
//    println()
//}
//2. 함수
fun test() {
    println("test")
}

fun test2(a: Int, b: Int) : Int {
    println(a+b)
    return a+b
}

//오버로딩
fun test2(a: Int) : Int {
    val b = 3
    println(a+b)
    return a+b
}

//근데, 코틀린에서는 오버로딩이 필요없다 -> default값을 주면된다. b: Int = 3
//호출할 때는 test(a:1)
//fun test2(a: Int, b: Int = 3) : Int {
//    println(a+b)
//    return a+b
//}

====================================================
package com.example.kotlin

fun main() { //메인함수
    //파라미터 순서가 달라도 이렇게 명시적으로 하면 문제가 없다.
    test2(id="상아님", name="채상아", nickname="상아")
    println(times(1,3))
    println(sametimes(1,3))
}

fun test2(name: String, nickname: String, id: String) = println(name+nickname+id)

//단일표현식으로 함수 표현
fun times(a: Int, b: Int) = a*b

//위와 같다
fun sametimes(a: Int, b: Int) : Int {
    return a*b;
}

=================================================
package com.example.kotlin

fun main() {
    //3. 변수
    // val = value(값)
    // var = variable(변경가능한)

    val a : Int = 3
    var b : Int = 10
    //a = 20 에러가난다
    b = 20

    //코틀린은 타입추론이 있어서 뒤에 타입이 없어도 된다.
    val name = "채상아"
    
}
=================================================
package com.example.kotlin

fun main() {
    val user = User("채상아", 10)
    //user.name 접근불가능 private이라서
    println(user.age)
}

class User(private val name: String, var age: Int = 100) {

}

=================================================
package com.example.kotlin

fun main() {
    Kid("아이", 3, "male")
}

//open을 이용해서 상속을 허용해야한다.
open class User(open val name: String, open var age: Int = 100)

//기본생성자는 생략
class Kid(override val name: String, override var age: Int) : User(name,age) {
    var gender: String =  "female"

    //가장먼저 호출
    init {
        println("초기화 중입니다.")
    }

    constructor(name: String, age: Int, gender: String) : this(name,age) {
        this.gender = gender
        println("부 생성자 호출")
    }
}
=================================================
//조건식
package com.example.kotlin

fun main() {
    max(10,3)
}

fun max(a: Int, b: Int) {
    if(a>b) {
        println(a)
    } else {
        println(b)
    }
}

//자바와 다르게 변수로 받을 수 있다.
fun max1(a: Int, b: Int) {
    val result = if(a>b) {
        println(a)
    } else {
        println(b)
    }
    println(result) //출력: kotlin.Unit -> void이기 때문에 print는
}

fun max2(a: Int, b: Int) {
    val result = if(a>b) {
        a
    } else {
        b
    }
    println(result) //출력: 10
}

=================================================
package com.example.kotlin

fun main() {
    max(10,3)
    isHoliday2("금")
}

//코틀린은 삼항연산자가 없다.
//코틀린은 조건문이 아니라 조건식이라서 변수로 받을 수 있다.
fun max(a: Int, b: Int) {
    val result = if(a>b) a else b //중괄호 생략가능
    println(result)
}

//월 화 수 목 금 토 일
fun isHoliday(dayOfWeek: String) {
    when(dayOfWeek) {
        "월" -> false
        "화" -> false
        "수" -> false
        "목" -> true
        "금" -> true
        "토" -> true
        "일" -> true
    }
}

//월 화 수 목 금 토 일
fun isHoliday1(dayOfWeek: String) {
    when(dayOfWeek) {
        //같은 값은 콤마로 생략가능
        "월",
        "화",
        "수" -> false
        "목",
        "금",
        "토",
        "일" -> true
    }
}

//월 화 수 목 금 토 일
fun isHoliday2(dayOfWeek: String) {
    val result = when(dayOfWeek) {
        //case에서 default를 썻다면 여기는 else가 default다
        "월",
        "화",
        "수" -> true
        else -> false
    }
    println(result) //출력: false
}

fun isHoliday3(dayOfWeek: String) {
    when(val day = dayOfWeek) { //이렇게 받아서 쓸 수도 있다.
        "토",
        "일" -> if(day == "토") "좋아" else "너무좋아"
        else -> "안좋아"
    }
}

fun isHoliday(dayOfWeek: Any) { //어떤걸 받든 상관없다 -> Any
    when(dayOfWeek) {
        "토",
        "일" -> if(dayOfWeek == "토") "좋아" else "너무좋아"
        in 2..4 -> {}  //파라미터가 정수이면 이걸쓰면된다.
        in listOf("월", "화") -> {}  //파라미터가 "월", "화" 이면
        else -> "안좋아"
    }
}

=====================================================
//반복문
package com.example.kotlin

fun main() {
    // for(int i = 1; i<11; i++) {
    //
    //}
    for(i in 1..10) {  //이거와 같은게 IntRange(1,10)
        print(i)
        print(".")
    }
    
    //위와 같은 의미이다.
    for(i in IntRange(1,10)) {
        print(i)
        print(".")
    }
}
====================================================
package com.example.kotlin

fun main() {
    for(i in 1 until 10) { //until은 끝에 숫자를 포함하지 않는다.
        print(i)
        print(".")
    }

    for(i in 1..10 step(2)) {//2씩 증가
        print(i)
        print(".")
    }

    for(i in 10 downTo 1) { //10부터 작아지게 만들겠다.
        print(i)
        print(".")
    } // 10.9.8.7....

    for(i in 10 downTo 1 step(2)) {
        //출력: 10.8.6.4....
    }

    var c = 1
    while(c<11)  {
        print(c)
        c++
    }
}
==================================================











































